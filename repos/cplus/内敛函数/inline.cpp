//内敛函数一般规模较小，在调用这些成员函数时，不是真正的执行函数的调用过程（如保存返回地址等处理），
//而是把函数代码嵌入程序的调用点（内敛函数在源文件中不是调用而是按原样展开），这样可以大大减少调用成员函数的时间。
//事实上我们可以用内联函数完全取代预处理宏

//任何在“类”内部定义的函数会自动成为内联函数，即使没有使用 inline 说明符
//下列情况，普通函数即使指定为内联函数，编译器也可能考虑不按内联编译：
//        (1) 在内联函数内不允许使用循环语句和开关语句；
//        (2) 内联函数的定义必须出现在内联函数第一次调用之前；
//        (3) 函数体过于庞大;
//        (4) 对函数进行取址操作.
#include <bits/stdc++.h>

using namespace std;

inline const string name(string a, string b) {
	return a.size() > b.size() ? a : b;
}

int main() {
	string a = ("sss");
	string b = ("ssh");
	cout << name(a, b);
}